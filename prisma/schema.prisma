// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output   = "../node_modules/.prisma/client" // Standard location, don't change unless necessary
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Models --- 

model User {
  id          String    @id // Clerk User ID
  email       String    @unique
  name        String?
  circleCommunityMemberId Int? @unique // Store Circle Community Member ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subscriptions Subscription[]
}

model Community {
  id        Int     @id @default(autoincrement())
  name      String
  slug      String  @unique
  description String?
  imageUrl  String?
  circleSpaceId Int   @unique // Circle Space ID this community maps to
  stripePriceIdMonthly String? // Stripe Price ID for monthly plan
  stripePriceIdAnnually String? // Stripe Price ID for annual plan
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id          Int      @id @default(autoincrement())
  userId      String
  communityId Int
  status      String   // e.g., 'active', 'canceled', 'past_due', 'provisioning_failed'
  stripeSubscriptionId String? @unique // Store Stripe Subscription ID
  stripeCustomerId     String? // Store Stripe Customer ID
  planType    String?  // e.g., 'monthly', 'annual'
  startDate   DateTime?
  endDate     DateTime? // When the subscription expires or was canceled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId]) // User can only have one subscription per community
}
