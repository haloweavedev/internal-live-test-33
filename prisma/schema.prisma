// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output   = "../node_modules/.prisma/client" // Standard location, don't change unless necessary
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Models --- 

model User {
  id                      String    @id // Clerk User ID
  email                   String    @unique
  name                    String?
  stripeCustomerId        String?   // Stripe Customer ID, nullable initially
  circleCommunityMemberId Int?      @unique // Circle Community Member ID, nullable initially
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  subscriptions           Subscription[]
}

model Community {
  id                      Int     @id @default(autoincrement())
  name                    String  // e.g., "INDC Community", "Solas Nua"
  slug                    String  @unique // e.g., "indc-community", "solas-nua"
  description             String?
  imageUrl                String? // URL for display on communities.shift.irish
  circleSpaceId           Int     @unique // The ID of the corresponding SECRET space created manually in Circle
  stripePriceIdMonthly    String? // Stripe Price ID for the monthly plan for this community's space
  stripePriceIdAnnually   String? // Stripe Price ID for the annual plan for this community's space
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  subscriptions           Subscription[]
}

model Subscription {
  id                      Int      @id @default(autoincrement())
  userId                  String   // Foreign key to User.id (Clerk ID)
  communityId             Int      // Foreign key to Community.id
  status                  String   // e.g., 'active', 'canceled', 'past_due', 'provisioning_failed'
  stripeSubscriptionId    String?  @unique // Stripe Subscription ID
  planType                String?  // 'monthly' or 'annual'
  startDate               DateTime? // When the subscription became active
  endDate                 DateTime? // When the subscription expires/expired or was canceled
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // If user is deleted, cascade delete subscriptions
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade) // If community is deleted, cascade delete subscriptions

  @@unique([userId, communityId]) // Prevent duplicate subscriptions for the same user/community
}
